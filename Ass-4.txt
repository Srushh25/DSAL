1: /*----------Assignment No - 4----------*/
Beginning with an empty binary search tree. Construct binary search tree by inserting the values in the order given. After constructing a binary tree -
Insert new node, ii. Find number of nodes in longest path from root,
Minimum data value found in the tree,
Change a tree so that the roles of the left and right pointers are swapped at every node

 
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
using namespace std;
typedef struct node
{ int a;
struct node *left,*right;
}node;
struct node *root=NULL;
class BST
 {
 
 int count;
 struct node *temp=NULL,*t1=NULL,*s=NULL, *t=NULL;
 public:
 BST()
 {
 count=0;
 }
 struct node *create();
 void insert();
 int height(struct node*,int c);
int findmin(struct node*);
void swap(struct node*);
void search(struct node * root, int m);
void display(struct node*);

 };
  
int main()
{
 BST b;
 int x, m, c=0,cnt,min,fl;
 do
 {
 cout<<"\n Enter your choice:";
 cout<<"\n 1.insert:";
 cout<<"\n 2.No of nodes in longest path:";
 cout<<"\n 3.Minimum value:";
 cout<<"\n 4.Swap:";
 cout<<"\n 5.Search:";
 cout<<"\n 6.display:";
 cout<<"\n 7.exit:";
 cin>>x;
 switch(x)
 {
 case 1:
 b.insert();
 break;
 case 2:
 cnt=b.height(root, c);
 cout<<"\n No of nodes in longest path="<<cnt;
  break;
case 3:
 min=b.findmin(root);
 cout<<"\n Minimum value = "<<min;
 break;
 case 4:
 b.swap(root);
break;
 case 5:
 cout<<"\n enter data to be searched:";
 cin>>m;
 b.search(root, m);
 break;
 case 6 :
b.display(root);
 break;
 case 7:
 exit(0);
 }
 }while(x!=7);
 return 0;
 }
 
 struct node *BST::create()
 {
 node *p=new(struct node);
 p->left=NULL;
 p->right=NULL;
 cout<<"\n enter the data";
 cin>>p->a;
 return p;
 }
 
 void BST::insert()
 { 
 temp=create();
 if(root==NULL)
 {
 root=temp;
 }
 else
 {
 t1=root;
 while(t1!=NULL)
{
 s=t1;
 if((temp->a)>(t1->a))
 {
 t1=t1->right;
 }
 else
 {
 t1=t1->left;
 }
 }
 if((temp->a)>(s->a))
 {
 s->right=temp;
 }
 else
 {
 s->left=temp;
 }
 }
 }
 
 int BST::height(struct node *q,int c)
 {
 if(root==NULL)
 {
 cout<<"\n tree not exist";
 }
 else
 {
 c++;
if(q->left!=NULL)
 {
 height(q->left,c);
 }
 if(q->right!=NULL)
 {
 height(q->right,c);
 }
 if(count<c)
 {
 count=c;
 }
}
 return count;
 }

  int BST::findmin(node *T)
 {
 while(T->left!=NULL)
 {
 T=T->left;
 }
 return T->a;
 }
 
 void BST::swap(struct node *q)
 {
 if(q==NULL)
 {
 cout<<"\n tree not exist";
 }
 else
 {
 if(q->left!=NULL)
 swap(q->left);
 if(q->right!=NULL)
 swap(q->right);
 t=q->left;
 q->left=q->right;
 q->right=t;
 }
 }
 
 void BST::search(struct node * root, int m)
 {
 int f;
 if(root!=NULL)
 {
 if(root->a==m)
 f=1;
 if(m>root->a)
 search(root->right,m);
 else
 search(root->left,m);
 }
 if(f==1)
 cout<<"\n FOUND!!!";
 } 
 void BST::display(struct node *q)
 {
 if(q==NULL)
 {
 cout<<"\n tree not exist";
 }
 else
 {
 cout<<"\n*"<<q->a;
 if(q->left!=NULL)
 {
 display(q->left);
 }
 if(q->right!=NULL)
 {
 display(q->right);
 }
 }
 }
/*207: OUTPUT
208: 
209: Enter your choice:
210: 1.insert:
211: 2.No of nodes in longest path:
212: 3.Minimum value:
213: 4.Swap:
214: 5.Search:
215: 6.display:
216: 7.exit:1
217: 
218: enter the data56
219: 
220: Enter your choice:
221: 1.insert:
222: 2.No of nodes in longest path:
223: 3.Minimum value:
224: 4.Swap:
225: 5.Search:
226: 6.display:
227: 7.exit:1
228: 
229: enter the data567
230: 
231: Enter your choice:
232: 1.insert:
233: 2.No of nodes in longest path:
234: 3.Minimum value:
235: 4.Swap:
236: 5.Search:
237: 6.display:
238: 7.exit:1
239: 
240: enter the data21
241: 
242: Enter your choice:
243: 1.insert:
244: 2.No of nodes in longest path:
245: 3.Minimum value:
246: 4.Swap:
247: 5.Search:
248: 6.display:
249: 7.exit:3
250: 
251: Minimum value = 21
252: Enter your choice:
253: 1.insert:
254: 2.No of nodes in longest path:
255: 3.Minimum value:
256: 4.Swap:
257: 5.Search:
258: 6.display:
259: 7.exit:2
260: 
261: No of nodes in longest path=2
262: Enter your choice:
263: 1.insert:
264: 2.No of nodes in longest path:
265: 3.Minimum value:
266: 4.Swap:
267: 5.Search:
268: 6.display:
269: 7.exit:6
270: 
271: *56
272: *21
273: *567
274: Enter your choice:
275: 1.insert:
276: 2.No of nodes in longest path:
277: 3.Minimum value:
278: 4.Swap:
279: 5.Search:
280: 6.display:
281: 7.exit:5
282: 
283: enter data to be searched:21
284: 
285: FOUND!!!
286: Enter your choice:
287: 1.insert:
288: 2.No of nodes in longest path:
289: 3.Minimum value:
290: 4.Swap:
291: 5.Search:
292: 6.display:
293: 7.exit:4
294: 
295: Enter your choice:
296: 1.insert:
297: 2.No of nodes in longest path:
298: 3.Minimum value:
299: 4.Swap:
300: 5.Search:
301: 6.display:
302: 7.exit:6
303: 
304: *56
305: *567
306: *21
307: Enter your choice:
308: 1.insert:
309: 2.No of nodes in longest path:
310: 3.Minimum value:
311: 4.Swap:
312: 5.Search:
313: 6.display:
314: 7.exit:7
315: 
316: --------------------------------
317: Process exited after 76.07 seconds with return value */
